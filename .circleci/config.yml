# References:
# 1. https://circleci.com/blog/how-to-build-a-docker-image-on-circleci-2-0/
# 2. https://circleci.com/docs/2.0/building-docker-images/
#

version: 2.1

defaults:
  install_deps: &install_deps
    run:
      name: install dependencies
      command: |
        apk update && apk add py-pip
        pip install "docker-compose==1.23.2"

  docker_image: &docker_image
    image: docker:18.06.0-ce-git

  build_image: &build_image
    run: |
      docker build \
        --build-arg CI="$CI" \
        --build-arg CIRCLE_SHA1="$CIRCLE_SHA1" \
        --build-arg CIRCLE_BUILD_URL="$CIRCLE_BUILD_URL" \
        -t bmo .

  store_log: &store_log
    store_artifacts:
      path: /app/bugzilla.log
      destination: bugzilla.log

  main_filters: &main_filters
    branches:
      ignore:
        - /^(?:release|test)-20\d\d\d\d\d\d\.\d+/
        - /\//
        - production

jobs:
  build_info:
    parallelism: 1
    working_directory: /app
    docker:
      - *docker_image
    steps:
      - setup_remote_docker
      - checkout
      - *build_image
      - *install_deps
      - run: |
          [[ -d build_info ]] || mkdir build_info
      - attach_workspace:
          at: /app/build_info
      - run: |
          docker-compose -f docker-compose.test.yml run --name version_json --entrypoint true bmo.test
          docker cp version_json:/app/version.json build_info/version.json
          docker rm version_json
      - run:
          name: build push data
          command: |
            docker-compose -f docker-compose.test.yml run --name push_data bmo.test push_data
            docker cp push_data:/app/build_info/blog.push.txt build_info/blog.push.txt
            docker cp push_data:/app/build_info/bug.push.txt build_info/bug.push.txt
            docker cp push_data:/app/build_info/email.push.txt build_info/email.push.txt
            docker cp push_data:/app/build_info/tag.txt build_info/tag.txt
            docker cp push_data:/app/build_info/wiki.push.txt build_info/wiki.push.txt
            docker rm push_data
      - run:
          name: only publish if tag exists
          command: |
            git fetch --tags
            tag="$(cat build_info/tag.txt)"
            if git tag | fgrep -q "$tag"; then
              echo "tag $tag exists!"
            else
              echo "tag $tag does not exist"
              echo yes > build_info/publish.txt
            fi
      - run:
          name: check if only version changed
          command: |
            if git diff 'HEAD~..HEAD' --name-only | grep -qv '^Bugzilla.pm'; then
              echo "more files than just Bugzilla.pm changed."
              exit 0
            fi
            if git diff 'HEAD~..HEAD' |grep '^[+-][^+-]' | grep -qv '^[+-]our $VERSION'; then
              echo "Something other than the version number changed."
              exit 0
            fi
            if [[ "$CIRCLE_BRANCH" == "master" ]]; then
              echo "Can't cut corners on the master branch"
              exit 0
            fi
            echo yes > build_info/only_version_changed.txt
      - persist_to_workspace:
          root: /app/build_info
          paths: ["*.txt"]
      - store_artifacts:
          path: /app/build_info
      - *store_log

  build:
    parallelism: 1
    working_directory: /app
    docker:
      - *docker_image
    steps:
      - setup_remote_docker
      - checkout
      - *build_image
      - attach_workspace:
          at: /app/build_info
      - deploy:
          command: |
            [[ -n "$DOCKERHUB_REPO" && -n "$DOCKER_USER" && -n "$DOCKER_PASS" ]] || exit 0
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            if [[ "$CIRCLE_BRANCH" == "master" ]]; then
              TAG="$(cat build_info/tag.txt)"
              if [[ -n "$TAG" && -f build_info/publish.txt ]]; then
                [[ -n "$GITHUB_PERSONAL_TOKEN" ]] || exit 0
                git config credential.helper "cache --timeout 120"
                git config user.email "$GITHUB_EMAIL"
                git config user.name "$GITHUB_NAME"
                git tag $TAG
                git push https://${GITHUB_PERSONAL_TOKEN}:x-oauth-basic@github.com/$GITHUB_REPO.git $TAG
                docker tag bmo "$DOCKERHUB_REPO:$TAG"
                docker push "$DOCKERHUB_REPO:$TAG"
              fi
              docker tag bmo "$DOCKERHUB_REPO:latest"
              docker push "$DOCKERHUB_REPO:latest"
            else
              docker tag bmo "$DOCKERHUB_REPO:$CIRCLE_BRANCH"
              docker push "$DOCKERHUB_REPO:$CIRCLE_BRANCH"
            fi

  test_sanity:
    parallelism: 1
    working_directory: /app
    docker:
      - *docker_image
    steps:
      - setup_remote_docker
      - checkout
      - *build_image
      - *install_deps
      - run: |
          [[ -d artifacts ]] || mkdir artifacts
      - attach_workspace:
          at: /app/build_info
      - run:
          name: run sanity tests
          command: |
            [[ -f build_info/only_version_changed.txt ]] && exit 0
            docker-compose -f docker-compose.test.yml run --no-deps bmo.test \
              test_sanity $(circleci tests glob 't/*.t' 'extensions/*/t/*.t' | \
              circleci tests split) | tee artifacts/$CIRCLE_JOB.txt
      - store_artifacts:
          path: /app/artifacts
      - *store_log

  test_webservices:
    parallelism: 1
    working_directory: /app
    docker:
      - *docker_image
    steps:
      - setup_remote_docker
      - checkout
      - *build_image
      - *install_deps
      - run: |
          [[ -d artifacts ]] || mkdir artifacts
      - attach_workspace:
          at: /app/build_info
      - run: |
          [[ -f build_info/only_version_changed.txt ]] && exit 0
          docker-compose -f docker-compose.test.yml run bmo.test test_webservices | \
            tee artifacts/$CIRCLE_JOB.txt
      - store_artifacts:
          path: /app/artifacts
      - *store_log

  test_selenium:
    parallelism: 1
    working_directory: /app
    docker:
      - *docker_image
    steps:
      - setup_remote_docker
      - checkout
      - *build_image
      - *install_deps
      - run: |
          [[ -d artifacts ]] || mkdir artifacts
      - attach_workspace:
          at: /app/build_info
      - run: |
          [[ -f build_info/only_version_changed.txt ]] && exit 0
          docker-compose -f docker-compose.test.yml run bmo.test test_selenium | \
            tee artifacts/$CIRCLE_JOB.txt
      - store_artifacts:
          path: /app/artifacts
      - *store_log

  test_bmo:
    parallelism: 1
    working_directory: /app
    docker:
      - *docker_image
    steps:
      - setup_remote_docker
      - checkout
      - *build_image
      - *install_deps
      - run: |
          [[ -d artifacts ]] || mkdir artifacts
      - attach_workspace:
          at: /app/build_info
      - run: |
          [[ -f build_info/only_version_changed.txt ]] && exit 0
          docker-compose -f docker-compose.test.yml run bmo.test test_bmo -q -f t/bmo/*.t
      - *store_log

workflows:
  version: 2
  main:
    jobs:
      - build_info:
          filters: *main_filters
      - build:
          filters: *main_filters
          requires:
            - build_info
            - test_sanity
            - test_bmo
            - test_webservices
            - test_selenium
      - test_sanity:
          filters: *main_filters
          requires:
            - build_info
      - test_bmo:
          filters: *main_filters
          requires:
            - build_info
      - test_webservices:
          filters: *main_filters
          requires:
            - build_info
      - test_selenium:
          filters: *main_filters
          requires:
            - build_info
