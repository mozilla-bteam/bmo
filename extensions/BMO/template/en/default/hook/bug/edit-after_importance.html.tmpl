[%# This Source Code Form is subject to the terms of the Mozilla Public
  # License,  v. 2.0. If a copy of the MPL was not distributed with this
  # file,  You can obtain one at http://mozilla.org/MPL/2.0/.
  #
  # This Source Code Form is "Incompatible With Secondary Licenses",  as
  # defined by the Mozilla Public License,  v. 2.0.
  #%]

[%# Display product and component descriptions after their respective fields %]
<script [% script_nonce FILTER none %]>
  window.addEventListener('DOMContentLoaded', () => {
    // Display product description if user requests it
    const prod_desc = '[% bug.product_obj.description FILTER html_light FILTER js %]';
    if (prod_desc) {
      const field_container = document.getElementById('field_container_product');
      const toggle_container = document.createElement('span');
      toggle_container.setAttribute('id', 'toggle_prod_desc');
      toggle_container.appendChild(document.createTextNode(' ('));
      const toggle_link = document.createElement('a');
      toggle_link.setAttribute('id', 'toggle_prod_desc_link');
      toggle_link.setAttribute('href', 'javascript:void(0);')
      toggle_link.appendChild(document.createTextNode('show info'));
      toggle_container.appendChild(toggle_link);
      toggle_container.appendChild(document.createTextNode(')'));
      field_container.appendChild(toggle_container);
      const desc_container = document.createElement('div');
      desc_container.setAttribute('id', 'prod_desc_container');
      desc_container.classList.add('bz_default_hidden');
      desc_container.innerHTML = prod_desc;
      field_container.appendChild(desc_container);
      toggle_link.addEventListener('click', () => {
        const hidden = desc_container.matches('.bz_default_hidden');
        toggle_link.innerHTML = hidden ? 'hide info' : 'show info';
        desc_container.classList.toggle('bz_default_hidden', !hidden);
      });
    }

    // Display component description if user requests it
    const comp_desc = '[% bug.component_obj.description FILTER html_light FILTER js %]';
    if (comp_desc) {
      const field_container = document.getElementById('field_container_component');
      const toggle_container = document.createElement('span');
      toggle_container.setAttribute('id', 'toggle_comp_desc');
      toggle_container.appendChild(document.createTextNode(' ('));
      const toggle_link = document.createElement('a');
      toggle_link.setAttribute('id', 'toggle_comp_desc_link');
      toggle_link.setAttribute('href', 'javascript:void(0);')
      toggle_link.appendChild(document.createTextNode('show info'));
      toggle_container.appendChild(toggle_link);
      toggle_container.appendChild(document.createTextNode(')'));
      field_container.appendChild(toggle_container);
      const desc_container = document.createElement('div');
      desc_container.setAttribute('id', 'comp_desc_container');
      desc_container.classList.add('bz_default_hidden');
      desc_container.innerHTML = comp_desc;
      field_container.appendChild(desc_container);
      toggle_link.addEventListener('click', () => {
        const hidden = desc_container.matches('.bz_default_hidden');
        toggle_link.innerHTML = hidden ? 'hide info' : 'show info';
        desc_container.classList.toggle('bz_default_hidden', !hidden);
      });
    }
  });
</script>

[% UNLESS cf_hidden_in_product('cf_rank', bug.product, bug.component) %]
  [% IF bug.check_can_change_field('cf_rank', 0, 1).allowed %]
    <label class="field_label" id="rank_label" for="cf_rank">Rank:</label>
    <input type="number" id="cf_rank" name="cf_rank" size="3" value="[% bug.cf_rank FILTER html %]">
  [% ELSIF bug.cf_rank != '' %]
    <label class="field_label" id="rank_label" for="cf_rank">Rank:</label>
    <span id="cf_rank">[% bug.cf_rank FILTER html %]</span>
  [% END %]
[% END %]
