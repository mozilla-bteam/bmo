--- extensions/BMO/bin/export_bmo_etl.pl
+++ extensions/BMO/bin/export_bmo_etl.pl
@@ -145,9 +147,6 @@ sub process_bugs {
     'SELECT bug_id AS id, delta_ts AS modification_time FROM bugs WHERE bug_id > ? ORDER BY bug_id LIMIT ? OFFSET ?'
     );
 
-  # Retrieve the max ID from BQ in case we didn'complete last time
-  my $max_id = get_max_id($table_name);
-
   while ($count < $total) {
     my @bugs = ();
 
@@ -265,9 +270,6 @@ sub process_attachments {
     'SELECT attach_id, modification_time FROM attachments WHERE attach_id > ? ORDER BY attach_id LIMIT ? OFFSET ?'
     );
 
-  # Retrieve the max ID from BQ in case we didn'complete last time
-  my $max_id = get_max_id($table_name);
-
   while ($count < $total) {
     my @results = ();
 
@@ -327,11 +329,13 @@ sub process_flags {
   my $count       = 0;
   my $last_offset = 0;
 
-  my $total = $dbh->selectrow_array('SELECT COUNT(*) FROM flags');
-  logger("Processing $total $table_name.");
-
+  # Retrieve the max ID from BQ in case we didn'complete last time
   my $max_id = get_max_id($table_name);
 
+  my $total = $dbh->selectrow_array('SELECT COUNT(*) FROM flags WHERE id > ?',
+    undef, $max_id);
+  logger("Processing $total $table_name.");
+
   my $sth
     = $dbh->prepare(
     'SELECT id, modification_date FROM flags WHERE id > ? ORDER BY id LIMIT ? OFFSET ?'
@@ -462,16 +466,19 @@ sub process_tracking_flags {
   my $count       = 0;
   my $last_offset = 0;
 
+  # Retrieve the max ID from BQ in case we didn'complete last time
+  my $max_id = get_max_id($table_name);
+
   my $total = $dbh->selectrow_array(
     'SELECT COUNT(*)
        FROM tracking_flags_bugs
             JOIN tracking_flags
             ON tracking_flags_bugs.tracking_flag_id = tracking_flags.id
-      ORDER BY tracking_flags_bugs.bug_id'
+      WHERE tracking_flags_bugs.id > ?
+      ORDER BY tracking_flags_bugs.bug_id', undef, $max_id
   );
-  logger("Processing $total $table_name.");
 
-  my $max_id = get_max_id($table_name);
+  logger("Processing $total $table_name.");
 
   my $sth = $dbh->prepare(
     'SELECT tracking_flags_bugs.id, tracking_flags.name, tracking_flags_bugs.bug_id, tracking_flags_bugs.value
@@ -636,8 +648,6 @@ sub process_users {
     'SELECT userid, modification_ts FROM profiles WHERE userid > ? ORDER BY userid LIMIT ? OFFSET ?'
     );
 
-  my $max_id = get_max_id($table_name);
-
   logger("max id: $max_id", DEBUG_OUTPUT);
 
   while ($count < $total) {
@@ -764,7 +774,6 @@ sub get_cache {
     # First uncompress the JSON and then decode it back to Perl data
     my $data;
     unless (gunzip \$gzipped_data => \$data) {
-      delete_lock();
       die "gunzip failed: $GunzipError\n";
     }
     return decode_json($data);
@@ -839,20 +841,18 @@ sub send_data {
     my $fh = path($filename)->open('>>');
     print $fh encode_json($query) . "\n";
     unless (close $fh) {
-      delete_lock();
       die "Could not close $filename: $!\n";
     }
 
     return;
   }
 
-  my $path = sprintf 'projects/%s/datasets/%s/tables/%s/insertAll',
-    $project_id, $dataset_id, $table;
+  my $path = sprintf 'projects/%s/datasets/%s/tables/%s/insertAll', $project_id,
+    $dataset_id, $table;
 
   my $result = call_big_query('POST', $path, $query);
 
   if (exists $result->{insertErrors} && @{$result->{insertErrors}}) {
-    delete_lock();
     die "Google Big Query insert failure: " . encode_json($result);
   }
 }
@@ -898,38 +897,6 @@ sub get_access_token {
   return $access_token;
 }
 
-# If a previous process is performing an export to BigQuery, then
-# we must check the lock table and exit if true.
-sub check_and_set_lock {
-  return if $test;    # No need if just dumping test files
-
-  logger('Checking for previous lock or setting new one', DEBUG_OUTPUT);
-
-  my $dbh_main = Bugzilla->dbh_main;
-
-  # Clear out any locks that are greater than 24h old
-  $dbh_main->do('DELETE FROM bmo_etl_locked WHERE creation_ts < '
-      . $dbh_main->sql_date_math('NOW()', '-', 24, 'HOUR'));
-
-  # Now check for any pre-existing locks and do not proceed if one found
-  my $locked = $dbh_main->selectrow_array('SELECT COUNT(*) FROM bmo_etl_locked');
-  if ($locked) {
-    die "Another process has set a lock. Exiting\n";
-  }
-
-  logger('Previous lock not found. Setting new one.', DEBUG_OUTPUT);
-
-  $dbh_main->do(
-    'INSERT INTO bmo_etl_locked (value, creation_ts) VALUES (?, NOW())',
-    undef, 'locked');
-}
-
-# Delete lock from bmo_etl_locked
-sub delete_lock {
-  logger("Deleting lock in database.");
-  Bugzilla->dbh_main->do('DELETE FROM bmo_etl_locked');
-}
-
 sub call_big_query {
   my ($method, $path, $data) = @_;
 
@@ -963,7 +929,7 @@ sub call_big_query {
 sub get_max_id {
   my ($table) = @_;
 
-  return 0 if $test; # no need if just dumping test files
+  return 0 if $test;    # no need if just dumping test files
 
   logger("Retrieving max id for table $table for snapshot date $snapshot_date.");
 
@@ -981,9 +947,10 @@ sub get_max_id {
 sub check_duplicate_data {
   my ($table) = @_;
 
-  return 0 if $test; # no need if just dumping test files
+  return 0 if $test;    # no need if just dumping test files
 
-  logger("Checking duplicate data for table $table for snapshot date $snapshot_date.");
+  logger(
+    "Checking duplicate data for table $table for snapshot date $snapshot_date.");
 
   my $query = {
     query =>
