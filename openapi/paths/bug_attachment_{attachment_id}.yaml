get:
  summary: Get a specific attachment
  description: This allows you to get a specific attachment based on the attachment ID.
  operationId: get_attachment
  parameters:
    - name: attachment_id
      in: path
      description: Integer attachment ID.
      required: true
      schema:
        type: integer
  responses:
    '200':
      description: A single Attachment
      content:
        application/json:
          schema:
            type: object
            properties:
              bugs:
                type: object
                const: {}
              attachments:
                description: >
                  This is an object where the attachment ids point directly to
                  objects describing the individual attachment.
                type: object
                additionalProperties:
                  $ref: ../components/schemas/Attachment.yaml
          example:
            bugs: {}
            attachments:
              '234': (attachment)
    default:
      description: >
        This method can throw all the same errors as [Get
        Bug](#tag/Bugs/paths/~1bug~1{bug_id}/get). In addition, it can also
        throw the following error:


        * 304 (Auth Failure, Attachment is Private)
          You specified the id of a private attachment in the "attachment_ids" argument, and you are not in the "insider group" that can see private attachments.
      content:
        application/json:
          schema:
            $ref: ../components/schemas/Error.yaml
  tags:
    - Attachments
put:
  summary: Update attachment metadata
  description: This allows you to update attachment metadata in Bugzilla.
  operationId: update_attachment
  parameters:
    - name: attachment_id
      in: path
      description: Integer attachment ID.
      required: true
      schema:
        type: integer
  requestBody:
    required: true
    content:
      application/json:
        schema:
          type: object
          properties:
            ids:
              description: The IDs of the attachments you want to update.
              type: array
              items:
                type: string
            file_name:
              description: >-
                The "file name" that will be displayed in the UI for this
                attachment.
              type: string
            summary:
              description: A short string describing the attachment.
              type: string
            comment:
              description: An optional comment to add to the attachment's bug.
              type: string
            content_type:
              description: >-
                The MIME type of the attachment, like ``text/plain`` or
                ``image/png``.
              type: string
            is_patch:
              description: >-
                ``true`` if Bugzilla should treat this attachment as a patch. If
                you specify this, you do not need to specify a ``content_type``.
                The ``content_type`` of the attachment will be forced to
                ``text/plain``.
              type: boolean
            is_private:
              description: >-
                `true` if the attachment should be private, `false` if the
                attachment should be public.
              type: boolean
            is_obsolete:
              description: '`true` if the attachment is obsolete, `false` otherwise.'
              type: boolean
            flags:
              description: An array of Flag objects with changes to the flags.
              type: array
              items:
                $ref: ../components/schemas/FlagUpdate.yaml
            bug_flags:
              description: >-
                An optional array of Flag objects with changes to the flags of
                the attachment's bug.
              type: array
              items:
                $ref: ../components/schemas/FlagUpdate.yaml
          required:
            - ids
        example:
          ids:
            - 2796
          summary: Test XML file
          comment: Changed this from a patch to a XML file
          content_type: text/xml
          is_patch: 0
  responses:
    '200':
      description: Attachment metadata updated.
      content:
        application/json:
          schema:
            type: object
            properties:
              attachments:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      description: The ID of the attachment that was updated.
                      type: integer
                    last_change_time:
                      description: >-
                        The exact time that this update was done at, for this
                        attachment. If no update was done (that is, no fields
                        had their values changed and no comment was added) then
                        this will instead be the last time the attachment was
                        updated.
                      type: string
                      format: date-time
                    changes:
                      description: >-
                        The changes that were actually done on this attachment.
                        The keys are the names of the fields that were changed,
                        and the values are an object with two items:
                      type: object
                      additionalProperties:
                        type: object
                        properties:
                          added:
                            description: >-
                              The values that were added to this field. Possibly
                              a comma-and-space-separated list if multiple
                              values were added.
                            type: string
                          removed:
                            description: The values that were removed from this field.
                            type: string
          example:
            attachments:
              - id: 2796
                last_change_time: '2014-09-29T14:41:53Z'
                changes:
                  content_type:
                    added: text/xml
                    removed: text/plain
                  is_patch:
                    added: '0'
                    removed: '1'
                  summary:
                    added: Test XML file
                    removed: test patch
    default:
      description: >
        This method can throw all the same errors as [Get
        Bug](#tag/Bugs/paths/~1bug~1{id_or_alias}/get), plus:


        * 129 (Flag Status Invalid)
          The flag status is invalid.
        * 130 (Flag Modification Denied)
          You tried to request, grant, or deny a flag but only a user with the required
          permissions may make the change.
        * 131 (Flag not Requestable from Specific Person)
          You can't ask a specific person for the flag.
        * 132 (Flag not Unique)
          The flag specified has been set multiple times. You must specify the id
          value to update the flag.
        * 133 (Flag Type not Unique)
          The flag type specified matches several flag types. You must specify
          the type id value to update or add a flag.
        * 134 (Inactive Flag Type)
          The flag type is inactive and cannot be used to create new flags.
        * 140 (Markdown Disabled)
          You tried to set the "is_markdown" flag of the "comment" to true but Markdown feature is
          not enabled.
        * 601 (Invalid MIME Type)
          You specified a "content_type" argument that was blank, not a valid
          MIME type, or not a MIME type that Bugzilla accepts for attachments.
        * 603 (File Name Not Specified)
          You did not specify a valid for the "file_name" argument.
        * 604 (Summary Required)
          You did not specify a value for the "summary" argument.
      content:
        application/json:
          schema:
            $ref: ../components/schemas/Error.yaml
  tags:
    - Attachments
